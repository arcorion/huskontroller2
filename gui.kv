<Touchpanel>:
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
            source: self.get_background()
    orientation: 'vertical'
    padding: [5, 5, 5, 5]
    #TopBar:
    #    background_color: 'black'
    #    id: topbar
    #    size_hint: 1, 10
    #    text: 'topbar'
    Desktop:
        padding: [5, 5, 5, 5]
        orientation: 'horizontal'
        size_hint: 1, 90
        PowerInput:
            size_hint: 45, 1
            orientation: 'vertical'
            PowerButtonContainer:
                padding: [10, 0]
                size_hint: 1, 15
                spacing: 5            
                PowerButton:
                    id: power
                    text: 'Projector'
                    on_state: app.projector.enable() if (self.state == "down") else app.projector.disable(); print("Projector: " + str(app.projector.get_state()))
            InputButtons:
                cols: 2
                padding: [10]
                rows: 2
                size_hint: 1, 85
                spacing: 5
                InputButton:
                    group: 'input_buttons'
                    id: podium
                    text: 'Podium'
                    on_state: app.input.set_podium() if (self.state == "down") else print(); print("Input: " + str(app.input.get_state()))
                InputButton:
                    group: 'input_buttons'
                    id: usbc
                    text: 'USB-C'
                    on_state: app.input.set_usbc() if (self.state == "down") else print(); print("Input: " + str(app.input.get_state()))
                InputButton:
                    group: 'input_buttons'               
                    id: hdmi
                    text: 'HDMI'
                    on_state: app.input.set_hdmi() if (self.state == "down") else print(); print("Input: " + str(app.input.get_state()))
                InputButton:
                    group: 'input_buttons'               
                    id: vga
                    text: 'VGA'
                    on_state: app.input.set_vga() if (self.state == "down") else print(); print("Input: " + str(app.input.get_state()))
        BlankSpace:
            size_hint: 25, 1
        ImageButtons:
            padding: [10]
            size_hint: 20, 1
            spacing: 5
            orientation: 'vertical'
            LaterUseBlank:
                size_hint: 1, 15
            BlankButton:
                id: blank
                size_hint: 1, 42.5
                text: 'Blank'
                on_state: app.image.set_blank() if (self.state == "down") else app.image.unset_blank(); print("Blank: " + str(app.image.get_blank()))        
            FreezeButton:
                id: freeze
                size_hint: 1, 42.5
                text: 'Freeze'
                on_state: app.image.set_freeze() if (self.state == "down") else app.image.unset_freeze(); print("Freeze: " + str(app.image.get_freeze()))
        SoundControls:
            size_hint: 10, 1
            orientation: 'vertical'
            VolumeLabel:
                background_color: [0/255, 0/255, 0/255, 0]
                color: [50/255, 0, 100/255, 1]
                disabled: 'True'
                halign: 'center'
                outline_width: 5
                outline_color: [0, 0, 0, 1]
                size_hint: 1, 10
                text: 'Volume\n' + str(int(volume.value))
            VolumeSlider:
                cursor_image: './images/w-logo.png'
                cursor_width: '48sp'
                id: volume
                min: 0
                max: 100
                orientation: 'vertical'
                step: 1
                size_hint: 1, 75
                text: 'Volume'
                value: app.sound.volume
                on_value: app.sound.set_volume(int(self.value)); print("Volume: " + str(app.sound.volume))
            MuteButton:
                id: mute
                size_hint: 1, 15
                sound: app.sound
                state: 'down' if app.sound.mute else 'normal'
                text: 'Mute'
                on_state: app.sound.set_mute() if (self.state == "down") else app.sound.unset_mute(); print("Mute: " + str(app.sound.get_state()))